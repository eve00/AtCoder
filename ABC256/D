import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    private static Scanner sc;

    public static void main(String[] args) {
        Main instance = new Main();
        sc = instance.new Scanner();
        instance.solve();
    }

    private void solve() {
        try {
            int N = sc.nextInt();
            int[] L = new int[N + 1];
            int[] R = new int[N + 1];
            boolean[] range = new boolean[200001];

            int min = 200001, max = 1;
            for (int i = 1; i <= N; i++) {
                L[i] = sc.nextInt();
                R[i] = sc.nextInt();


                if (min > L[i]) min = L[i];
                if (max < R[i]) max = R[i];
                Arrays.fill(range, L[i], R[i], true);
            }


            int l = min, r = 0;
            int i = min;
            int cnt = 1;
            while (i <= max) {
                if (cnt == 0) {
                    if (range[i]) {
                        l = i;
                        r = 0;
                    }else{
                        i++;
                        continue;
                    }
                }

                if (range[i]) {
                    r++;
                    cnt++;
                } else {
                    System.out.println(l + " " + (l + r));
                    cnt = 0;
                }
                i++;
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private class Scanner {
        String[] s;
        int i;
        BufferedReader br;
        String regex = " ";

        public Scanner() {
            s = new String[0];
            i = 0;
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        @Override
        protected void finalize() throws Throwable {
            try {
                super.finalize();
            } finally {
                destruction();
            }
        }

        private void destruction() throws IOException {
            if (br != null) br.close();
        }

        public String next() throws IOException {
            if (i < s.length) return s[i++];
            String st = br.readLine();
            while (st == "") st = br.readLine();
            s = st.split(regex, 0);
            i = 0;
            return s[i++];
        }

        public int nextInt() throws NumberFormatException, IOException {
            return Integer.parseInt(next());
        }

        public Long nextLong() throws NumberFormatException, IOException {
            return Long.parseLong(next());
        }

        public Double nextDouble() throws NumberFormatException, IOException {
            return Double.parseDouble(next());
        }
    }
}
