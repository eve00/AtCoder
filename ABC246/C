import java.util.*;

class C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        long K = sc.nextLong();
        long X = sc.nextLong();
        long[] A = new long[N + 1];
        long[] C = new long[N + 1];
        for (int i = 1; i <= N; i++) A[i] = sc.nextLong();


        MergeSort(A, C, 1, N + 1);

        for (int i = N; A[i] >= X; i--) {
            while (A[i] >= X) {
                A[i] -= X;
                K--;
                if (K == 0) {
                    long sum = 0;
                    for (long val : A)
                        sum += val;

                    System.out.println(sum);
                    System.exit(0);
                }
            }
        }

        MergeSort(A, C, 1, N + 1);

        for (int i = N; ; i--) {
            if(A[i]==0){
                System.out.println(0);
                System.exit(0);
            }
            A[i] = 0;
            K--;
            if (K == 0) {
                break;
            }
        }

        long sum = 0;
        for (long val : A)
            sum += val;

        System.out.println(sum);
    }


    public static void MergeSort(long[] A, long[] C, int l, int r) {
        if (r - l == 1) return;

        int m = (l + r) / 2;
        MergeSort(A, C, l, m);
        MergeSort(A, C, m, r);


        int c1 = l, c2 = m, cnt = 0;
        while (c1 != m || c2 != r) {
            if (c1 == m) {
                C[cnt] = A[c2];
                c2++;
            } else if (c2 == r) {
                C[cnt] = A[c1];
                c1++;
            } else {
                if (A[c1] <= A[c2]) {
                    C[cnt] = A[c1];
                    c1++;
                } else {
                    C[cnt] = A[c2];
                    c2++;
                }
            }
            cnt++;
        }

        for (int i = 0; i < cnt; i++) A[l + i] = C[i];
    }
}
